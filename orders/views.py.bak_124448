from django.shortcuts import render, get_object_or_404
from django.db.models import F, Sum, Value, DecimalField, Count
from django.db.models.functions import Coalesce, Cast
from .models import Order

DEC = DecimalField(max_digits=12, decimal_places=2)

def _annotate_totals(qs):
    items_sum = Coalesce(
        Sum(Cast(F("items__quantity"), DEC) * Cast(F("items__unit_price"), DEC), output_field=DEC),
        Value(0, output_field=DEC)
    )
    return (
        qs.select_related("customer")
          .annotate(items_total=items_sum)
          .annotate(total_display=Coalesce(F("total"), F("items_total")))
    )

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger

def orders_list(request):
    # queryset ordonné + annotations existantes si utiles
    qs = Order.objects.all().order_by("-id")

    # pagination robuste
    page = request.GET.get("page", 1)
    paginator = Paginator(qs, 20)  # 20 items / page
    try:
        page_obj = paginator.page(page)
    except PageNotAnInteger:
        page_obj = paginator.page(1)
    except EmptyPage:
        page_obj = paginator.page(paginator.num_pages)

    return render(request, "orders/orders_list.html", {
        "orders": page_obj.object_list,
        "page_obj": page_obj,
    })






def orders_by_customer(request, customer_id):
    orders = _annotate_totals(Order.objects.filter(customer_id=customer_id)).order_by("-id")
    return render(request, "orders/orders_by_customer.html", {"orders": orders, "customer_id": customer_id})

from django.http import HttpResponse
import csv
from django.core.paginator import Paginator


def create(request):
    from django.http import HttpResponse
import csv
    return HttpResponse('create - placeholder', content_type='text/plain; charset=utf-8')



def edit(request):
    from django.http import HttpResponse
import csv
    return HttpResponse('edit - placeholder', content_type='text/plain; charset=utf-8')



def delete(request):
    from django.http import HttpResponse
import csv
    return HttpResponse('delete - placeholder', content_type='text/plain; charset=utf-8')



def update(request):
    from django.http import HttpResponse
import csv
    return HttpResponse('update - placeholder', content_type='text/plain; charset=utf-8')



def detail(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    return render(request, "orders/order_detail.html", {"order": order})

def export_top_clients_csv(request):
    """
    Export CSV des 10 meilleurs clients.
    Robuste aux champs manquants et aux NULL.
    """
    import csv
    from decimal import Decimal
    from django.db.models import Sum, Count
    from django.http import HttpResponse

    resp = HttpResponse(content_type="text/csv; charset=utf-8")
    resp["Content-Disposition"] = 'attachment; filename="top_clients.csv"'
    w = csv.writer(resp)

    try:
        from .models import Order
        # Détecte s'il existe un champ customer et son nom
        customer_field = None
        for cand in ("customer", "client", "customer_id", "client_id"):
            if hasattr(Order, cand):
                customer_field = cand
                break

        if customer_field:
            # On tente aussi un libellé lisible (customer__name ou similaire)
            name_lookup = None
            for cand in (f"{customer_field}__name", f"{customer_field}__full_name", f"{customer_field}__label"):
                try:
                    # test via .values() sans exécuter entièrement
                    Order.objects.values(cand)[:1]
                    name_lookup = cand
                    break
                except Exception:
                    pass

            if name_lookup is None:
                # à défaut, on exporte l'ID
                name_lookup = f"{customer_field}_id" if not customer_field.endswith("_id") else customer_field

            qs = (
                Order.objects.values(name_lookup)
                .annotate(
                    total_orders=Count("id"),
                    amount=Sum("total")
                )
                .order_by("-amount")[:10]
            )

            w.writerow(["Client", "Nb Commandes", "Montant Total"])
            for r in qs:
                client = r.get(name_lookup, "Inconnu")
                total_orders = r.get("total_orders") or 0
                amount = r.get("amount") or Decimal("0")
                w.writerow([client, total_orders, amount])
        else:
            # Fallback si pas de customer : on exporte 10 commandes récentes
            qs = Order.objects.all().order_by("-id")[:10]
            w.writerow(["Order ID", "Total"])
            for o in qs:
                w.writerow([getattr(o, "id", ""), getattr(o, "total", 0)])
    except Exception as e:
        # On n'échoue pas en 500 : on renvoie un CSV avec l'erreur
        w.writerow(["Erreur", str(e)])

    return resp

